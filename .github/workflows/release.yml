name: Release
on: workflow_dispatch

jobs:
#  native-image:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [macos-latest, ubuntu-latest]
#        include:
#          - os: macos-latest
#            graal_url: https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.0.0/graalvm-ce-java11-darwin-amd64-20.0.0.tar.gz
#            artifact: bazel-deps-macos
#            bazel_installer_sha: ee86e5bcf8661af7a08ea49378db1977bedb9a391841158b0610d27c4f601ad1
#            bazel_version: 4.2.0
#          - os: ubuntu-latest
#            graal_url: https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.0.0/graalvm-ce-java11-linux-amd64-20.0.0.tar.gz
#            artifact: bazel-deps-linux
#            bazel_installer_sha: 396d7031134889647351b9caf947811ecee5c2c1c5772e01b0916439067667fd
#            bazel_version: 4.2.0
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Bazel output cache
#        id: cache-bazel
#        uses: actions/cache@v1
#        with:
#          path: "${{ github.workspace }}/.bazel-cache"
#          key: ${{ runner.os }}-bazel-out-${{ github.run_id}}
#          restore-keys: |
#            ${{ runner.os }}-bazel-out-
#
#      - name: Configure bazel config for actions
#        run: |
#          echo "build --config github_actions" > user.bazelrc
#          echo "build --disk_cache ${{ github.workspace }}/.bazel-cache/disk-cache" >> user.bazelrc
#          echo "build --repository_cache ${{ github.workspace }}/.bazel-cache/repo-cache" >> user.bazelrc
#
#      - name: Install bazel
#        run: ./ci_scripts/ci_install_bazel.sh
#        env:
#          BAZEL_VERSION: ${{ matrix.bazel_version }}
#          BAZEL_INSTALLER_SHA: ${{ matrix.bazel_installer_sha }}
#          BAZEL_BIN_LOC: "${{ github.workspace }}/.bazel-cache/bazel-bin"
#
#      - name: Build fat jar
#        run: ./ci_scripts/build_fat_jar.sh
#        env:
#          BAZEL_VERSION: ${{ matrix.bazel_version }}
#          BAZEL_INSTALLER_SHA: ${{ matrix.bazel_installer_sha }}
#          BAZEL_BIN_LOC: "${{ github.workspace }}/.bazel-cache/bazel-bin"
#
#      - uses: olafurpg/setup-scala@v10
#
#      - run: jabba install graal-custom@20.0=tgz+${{ matrix.graal_url }}
#
#      - name: Make native image
#        run: ./ci_scripts/make_native_artifact.sh  ${{ matrix.graal_url }}
#
#      - name: Prepare outputs from platform run
#        run: ./ci_scripts/prepare_output.sh ${{ matrix.artifact }} staging-directory
#
#      - uses: actions/upload-artifact@master
#        with:
#          name: ${{ matrix.artifact }}
#          path: staging-directory
  deploy-release:
    name: Deploy release
#    needs: native-image
    runs-on: ubuntu-latest
    environment: Deployment
    steps:
      - uses: actions/checkout@v2

      - name: Load environment
        run: |
          deploy_version=$(cat VERSION | tr -d '[:space:]')
          echo "VERSION=$deploy_version" >> $GITHUB_ENV
#
#      - name: Download linux bazel-deps
#        uses: actions/download-artifact@v1
#        with:
#          name: bazel-deps-linux
#          path: downloads
#
#      - name: Download macos bazel-deps
#        uses: actions/download-artifact@v1
#        with:
#          name: bazel-deps-macos
#          path: downloads
#
      - name: show downloads
        run : |
          mkdir downloads
          echo "test" > downloads/bazel-deps-linux.sha256
          echo "test" > downloads/bazel-deps-macos.sha256

      - name: Build update_dependencies.sh
        run: ./ci_scripts/make_update_dependencies.sh "v${{ env.VERSION }}"

      - name: Deploy release files
        run: |
          ./ci_scripts/deploy_artifact.sh update_dependencies.sh dev.jtrim777.bazeldeps test \
            "${{ env.VERSION }}" "${{ secrets.REPO_USER }}" "${{ secrets.REPO_PASS }}"
